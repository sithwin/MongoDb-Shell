Version
=======
mongo --nodb

Restore
=======
- go to folder
mongorestore [folderName]

MongoShell
==========
-- go to command prompt
>mongo

Set current database
====================
>use [dbName]

List Databases
==============
>show dbs

List Collections
================
>show collections

Insert
======
>db.[collectionName].insert({'key': 'value'})
>db.[collectionName].insertOne({'key': 'value'})
>db.[collectionName].insertMany
(
[
  {"title": "a"},
  {"title": "b"}
],
{ 
  {"ordered": false} // Default is true => stop insert the rest of the documents
}
)

Find
====
>db.[collectionName].find().pretty()
>var c = db.[collectionName].find()
>c.hasNext()
true

db.[collectionName].find({'mpaaRating': 'PG-13', year: 2009}).pretty()
-- Find in nested document
db.[collectionName].find({'wind.direction.angle': 290}).pretty()

-- Find in Array
db.movies.find({cast: "Jeff Bridges"}).pretty()
-- Find by Position
db.movies.find({'cast.0': 'Jeff Bridges'}).pretty()

Count
=====
 db.movieDetails.count()
 -- Nested objects
 db.movieDetails.count({'awards.wins': 2, 'awards.nominations': 2})
 
 -- Array
 db.movieDetails.count({'writers': ['Ethan Coen', 'Joel Coen']})
 db.movieDetails.count({'genres' : 'Family'})
 db.movieDetails.count({'genres.1': 'Western'})

Cursors
=======
it => iterate

Projection
==========
as Second Argument
-- Only display Title Fields
db.movies.find({'cast.0': 'Jeff Bridges'}), {title: 1}
-- do not display _id field
db.movies.find({'cast.0': 'Jeff Bridges'}), {title: 1, _id: 0}

-- Exclude
db.movies.find({'cast.0': 'Jeff Bridges'}), {cast: 0}



Use Javascript Files
====================
load("[jsfileName]")
