Version
=======
mongo --nodb

Restore
=======
- go to folder
mongorestore [folderName]

MongoShell
==========
-- go to command prompt
>mongo

Set current database
====================
>use [dbName]

List Databases
==============
>show dbs

List Collections
================
>show collections

Insert
======
>db.[collectionName].insert({'key': 'value'})
>db.[collectionName].insertOne({'key': 'value'})
>db.[collectionName].insertMany
(
[
  {"title": "a"},
  {"title": "b"}
],
{ 
  {"ordered": false} // Default is true => stop insert the rest of the documents
}
)

Find
====
>db.[collectionName].find().pretty()
>var c = db.[collectionName].find()
>c.hasNext()
true

db.[collectionName].find({'mpaaRating': 'PG-13', year: 2009}).pretty()
-- Find in nested document
db.[collectionName].find({'wind.direction.angle': 290}).pretty()

-- Find in Array
db.movies.find({cast: "Jeff Bridges"}).pretty()
-- Find by Position
db.movies.find({'cast.0': 'Jeff Bridges'}).pretty()

Count
=====
 db.movieDetails.count()
 -- Nested objects
 db.movieDetails.count({'awards.wins': 2, 'awards.nominations': 2})
 
 -- Array
 db.movieDetails.count({'writers': ['Ethan Coen', 'Joel Coen']})
 db.movieDetails.count({'genres' : 'Family'})
 db.movieDetails.count({'genres.1': 'Western'})

Cursors
=======
it => iterate

Projection
==========
as Second Argument
-- Only display Title Fields
db.movies.find({'cast.0': 'Jeff Bridges'}), {title: 1}
-- do not display _id field
db.movies.find({'cast.0': 'Jeff Bridges'}), {title: 1, _id: 0}

-- Exclude
db.movies.find({'cast.0': 'Jeff Bridges'}), {cast: 0}

Update
======
$set  Sets the value of a field in a document
$inc  Increments the value of the field by the specified amount
$mul  Multiplies the value of the field by the specified amount
$rename Renames a field
$setOnInsert    Sets the value of a field if an update results in an insert of a document. Has no effect on update operations                 that modifying existing documents
$unset  Removes the specified field from a document

db.movieDetails.updateOne({
  title: "The Martian"
}, {
  $set: {
    poster: "this is poster"
  }
})

set new object
--------------
db.movieDetails.updateOne({
  title: "The Martian"
}, {
  $set: {
    "awards": {
      "wins": 8,
      "nominations": 14,
      "text": "Nominated for 3 Golden Globes. Another 8 wins & 14 nominations."
    }
  }
});

Increment the value
--------------------
db.movieDetails.updateOne({
  title: "The Martian"
}, {
  $inc: {
    "tomato.reviews": 3,
    "tomato.userReviews": 25
  }
});

Updating Array
--------------
$addToSet   Adds elements to an array only if they do not already exist in the set.
$pop        Removes the first or last item of an array.
pullAll     Removes all matching values from an array.
pull        Removes all array elements that match a specified query.
pushAll     Deprecated. Adds several items to an array.
push        Adds an item to an array.

PUSH
----
db.movieDetails.updateOne({
  title: "The Martian"
}, {
  $push: {
    reviews: {
      rating: 4.5,
      date: ISODate("2016-01-12T09:00:00Z"),
      reviewer: "Spencer H.",
      text: "reviewText1"
    }
  }
})

PUSH with EACH
--------------
db.movieDetails.updateOne(
{ title: "The Martian" }, 
{ $push: { reviews: { $each: [
		{
			rating: 5,
			date: ISODate("2016-01-12T09:00:00Z"),
			reviewer: "Spencer H.",
			text: "reviewText2"
		},{
			rating: 6,
			date: ISODate("2016-01-12T09:00:00Z"),
			reviewer: "Kristian Z.",
			text: "reviewText3"
		}, {
			rating: 7,
			date: ISODate("2016-01-12T09:00:00Z"),
			reviewer: "Matthew Samuel",
			text: "reviewText4"
		}
		]
}}});

db.movieDetails.updateOne(
{ "imb.id": detailimdb.id },
{ $set: detail },
{ upsert: true}
)

REPLACEONE
----------
detaliDoc = db.movieDetails.findOne({"imdb.id": "tt436814"});
detaliDoc.poster;
detaliDoc.poster = "This is new poster";
detaliDoc.genres;
detaliDoc.genres.push("Documentary");
db.movieDetails.replaceOne(
{ "imdb.id": detaliDoc.imdb.id },
detaliDoc
);

DELETE
======
db.reviews.deleteOne({_id:ObjectId("333")});
db.reviews.deleteMany({reviewer_id: 89898});

Use Javascript Files
====================
load("[jsfileName]")
